import pygame
import random

# Inicializando o Pygame
pygame.init()
pygame.font.init()  # Inicializa o sistema de fontes do Pygame

# Definindo as cores
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Dimensões da janela
WIDTH = 400
HEIGHT = 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Flappy Bird')

# Definindo o FPS (frames por segundo)
FPS = 60
clock = pygame.time.Clock()

# Definindo as variáveis do jogo
bird_width = 70
bird_height = 60
bird_x = 50
bird_y = HEIGHT // 2
bird_velocity = 0
gravity = 0.5
jump = -10

pipe_width = 100
pipe_gap = 400
pipe_velocity = -4

# Variáveis de controle do jogo
game_started = False
game_over = False
score = 0

# Carregando a imagem do pássaro
try:
    bird_image = pygame.image.load('quadrado.png')
    bird_image = pygame.transform.scale(bird_image, (bird_width, bird_height))
except pygame.error as e:
    print(f"Erro ao carregar a imagem 'quadrado.png': {e}")
    pygame.quit()
    quit()

# Carregando a imagem do cano
try:
    pipe_image = pygame.image.load('retangulo.png')
    pipe_image = pygame.transform.scale(pipe_image, (pipe_width, HEIGHT))
except pygame.error as e:
    print(f"Erro ao carregar a imagem 'retangulo.png': {e}")
    pygame.quit()
    quit()

# Carregando a imagem de fundo
try:
    background_image = pygame.image.load(r'C:\Users\ALUNO\Documents\fernando\fundo.png2.jpg')  # Ajuste o caminho aqui
    background_image = pygame.transform.scale(background_image, (WIDTH, HEIGHT))  # Redimensiona para caber na tela
except pygame.error as e:
    print(f"Erro ao carregar a imagem de fundo: {e}")
    pygame.quit()
    quit()

# Função para gerar novos canos
def create_pipe():
    max_pipe_height = HEIGHT - pipe_gap - 5
    if max_pipe_height <= 5:
        max_pipe_height = 5
    pipe_height = random.randint(5, max_pipe_height)
    return {'x': WIDTH, 'height': pipe_height}

# Função para desenhar o pássaro
def draw_bird():
    screen.blit(bird_image, (bird_x, bird_y))

# Função para desenhar os canos
def draw_pipe(pipe):
    screen.blit(pipe_image, (pipe['x'], 0))
    screen.blit(pipe_image, (pipe['x'], pipe['height'] + pipe_gap))

# Função para verificar colisão
def check_collision(pipe):
    pipe_rect_top = pygame.Rect(pipe['x'], 0, pipe_width, pipe['height'])
    pipe_rect_bottom = pygame.Rect(pipe['x'], pipe['height'] + pipe_gap, pipe_width, HEIGHT)
    bird_rect = pygame.Rect(bird_x, bird_y, bird_width, bird_height)
    return (bird_rect.colliderect(pipe_rect_top) or 
            bird_rect.colliderect(pipe_rect_bottom) or 
            bird_y + bird_height > HEIGHT or 
            bird_y < 0)

# Função para exibir as instruções iniciais
def show_instructions():
    screen.fill(WHITE)
    font = pygame.font.SysFont(None, 50)
    title_text = font.render('Flappy Bird', True, BLACK)
    screen.blit(title_text, [WIDTH // 4, HEIGHT // 4])

    font = pygame.font.SysFont(None, 35)
    instructions_text1 = font.render('Press SPACE to jump', True, BLACK)
    instructions_text2 = font.render('Avoid the pipes', True, BLACK)
    instructions_text3 = font.render('Press ENTER to start', True, BLACK)
    screen.blit(instructions_text1, [WIDTH // 6, HEIGHT // 2])
    screen.blit(instructions_text2, [WIDTH // 4, HEIGHT // 2 + 40])
    screen.blit(instructions_text3, [WIDTH // 5, HEIGHT // 2 + 80])

    pygame.display.update()

# Função principal do jogo
def game():
    global bird_y, bird_velocity, score, game_over, game_started

    pipes = [create_pipe()]

    while not game_started:
        show_instructions()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    game_started = True

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and not game_over:
                    bird_velocity = jump
                if event.key == pygame.K_r and game_over:
                    game_over = False
                    bird_y = HEIGHT // 2
                    bird_velocity = 0
                    pipes.clear()
                    pipes.append(create_pipe())
                    score = 0

        # Limpar a tela e desenhar o fundo
        screen.blit(background_image, (0, 0))  # Desenha o fundo

        if not game_over:
            bird_velocity += gravity
            bird_y += bird_velocity

            for pipe in pipes:
                pipe['x'] += pipe_velocity
                if pipe['x'] < -pipe_width:
                    pipes.remove(pipe)
                    pipes.append(create_pipe())
                    score += 1

            for pipe in pipes:
                if check_collision(pipe):
                    game_over = True

            draw_bird()
            for pipe in pipes:
                draw_pipe(pipe)

            font = pygame.font.SysFont(None, 35)
            score_text = font.render(f'Score: {score}', True, BLACK)
            screen.blit(score_text, [10, 10])
        else:
            font = pygame.font.SysFont(None, 75)
            game_over_text = font.render('Game Over', True, BLACK)
            screen.blit(game_over_text, [WIDTH // 4, HEIGHT // 3])
            font = pygame.font.SysFont(None, 35)
            restart_text = font.render('Press R to Restart', True, BLACK)
            screen.blit(restart_text, [WIDTH // 4, HEIGHT // 2])

        pygame.display.update()
        clock.tick(FPS)

# Iniciando o jogo
game()
pygame.quit()
